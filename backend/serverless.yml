org: andrewemadgabra
app: my-first-app

service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  

package:
  individually: true   

provider:
  name: aws
  runtime: nodejs12.x 

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  timeout: 10
    
  profile: custom-profile

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    ATTACHMENTS_TABLE: Attachment-Todo-${self:provider.stage}
    USERID_INDEX: UserIdIndex
    TODOS_S3_BUCKET: serverless-todos-andrew-todos-${self:provider.stage}
    ATTACHMENTS_S3_BUCKET: serverless-todos-andrew-attachment-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3000
    BUCKET_REGION: ${self:provider.region}

custom: 
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true  
  documentation:
    api:
      info:
        version: "2"
        title: "Todo API"
        description: "Serverless application for Todo"
    models:
      - 
        name: TodoRequest
        description: "Model for Todo Request"
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - 
        name: UpdateTodoRequest
        description: "Model for Update Request"
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}  


functions:

  RS256Auth:
    handler: src/lambda/auth/auth0Authorizer.handler         
    iamRoleStatementsInherit: true

  # API For get all user's Todo Record 
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          path: /todos
          method: get          
          cors: true
          authorizer: # An AWS API Gateway custom authorizer function
            name: RS256Auth # The name of the authorizer function (must be in this service)            
    iamRoleStatementsInherit: true                   
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}                
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENTS_TABLE}/index/${self:provider.environment.USERID_INDEX}          

  # API For creating User Todo Record.
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          path: /todos
          method: post
          cors: true
          authorizer: # An AWS API Gateway custom authorizer function
            name: RS256Auth # The name of the authorizer function (must be in this service)          
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoRequest 
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE} 
    

  # API For Updating User Todo Record.             
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          path: /todos/{todoId}
          method: patch
          cors: true 
          authorizer: # An AWS API Gateway custom authorizer function
            name: RS256Auth # The name of the authorizer function (must be in this service)                             
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update todo
            description: Update a todo item
            requestModels:
              'application/json': UpdateTodoRequest 
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  


   # API For Deleting User Todo Record.
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          path: /todos/{todoId}
          method: delete
          authorizer:
            name: RS256Auth            
          cors: true          
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  
        

   # API For Generating Upload URL.
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          path: /todos/{todoId}/attachment
          method: post
          authorizer: 
            name: RS256Auth           
          cors: true 
    iamRoleStatementsInherit: true 
    iamRoleStatements:    
      - Effect: Allow
        Action:
          - s3:GetSignedUrl
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*     
  
  # API For Attaching URL to the Todo Table.  
  AttachmentUrl:           
    handler: src/lambda/s3/attachment.handler
    events:
      - sns:
          arn: !Ref attachUrlTopic
          topicName: 'attachUrlTopic-${self:provider.stage}'                 
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE} 
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"    
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*            
           

resources:
  Resources:
    # AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    #Todos Table
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S          
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH          
          - AttributeName: todoId
            KeyType: RANGE            
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    #Attachment Table used for Index searching
    AttachmentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DependsOn: TodosDynamoDBTable
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S          
        KeySchema:
          - AttributeName: userId
            KeyType: HASH           
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH             
            Projection:
              ProjectionType: ALL                                     
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ATTACHMENTS_TABLE}
     
    #Request Object validation, only accept exact format Request Object,
    #Otherwise Invalid.    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false     

    #Store User's uploaded images. Not for attachment. Not processed.
    TodoBucket:
      Type: AWS::S3::Bucket 
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}   
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: 
                !Ref attachUrlTopic                                     
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    #Policy for Todo Bucket
    TodoBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref TodoBucket 

    #Store Processed Images, which is display as Thumbnail for the Todo Item lists. 
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
    AttachmentsBucketPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref  AttachmentUrlLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}

    #Policy for Attachment Bucket        
    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetResizePhotosBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket         
      
    #SNS Topic - Will be triggered when image is upload to the Todo S3 Bucket.    
    attachUrlTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Attach URL topic'
        TopicName: 'attachUrlTopic-${self:provider.stage}'

    #Policy for the attachURL Topic.
    attachUrlTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn:
        - attachUrlTopic      
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AllowServerlessFrameworkEnterpriseToPublish
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'sns:Publish'
              Resource:
                Ref: attachUrlTopic               
        Topics:
          - !Ref attachUrlTopic  
                    