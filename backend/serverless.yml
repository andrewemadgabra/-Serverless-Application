org: andrewemadgabra
app: my-first-app
service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true   

provider:
  name: aws
  runtime: nodejs10.x 

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true   

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    USERS_TODO_TABLE: Users-Todo-${self:provider.stage}
    TODO_ID_INDEX: UserIdIndex
    TODOS_S3_BUCKET: serverless-andrew-todos-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-todos-andrew-thumbnail-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    BUCKET_REGION: ${self:provider.region}
    IS_OFFLINE: "False"
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"    
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*  
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
      Resource:
          - '*'     
  
  #role: arn:aws:iam::251132493412:role/SFProRole-default

  custom: 
    webpack:
      webpackConfig: ./webpack.config.js
      includeModules: true  
    documentation:
      api:
        info:
          version: "2"
          title: "Todo API"
          description: "Serverless application for Todo"
      models:
        - 
          name: TodoRequest
          description: "Model for Todo Request"
          contentType: application/json
          schema: ${file(models/create-todo-request.json)}
        - 
          name: UpdateTodoRequest
          description: "Model for Update Request"
          contentType: application/json
          schema: ${file(models/update-todo-request.json)}  
    topicName: attachUrlTopic-${self:provider.stage}



functions:

  RS256Auth:
    handler: src/lambda/auth/auth0Authorizer.handler         
    iamRoleStatementsInherit: true

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatementsInherit: true          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}                
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}/index/${self:provider.environment.TODO_ID_INDEX}          

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          documentation:
            summary: "Create a new todo"
            description: "Create a new todo"
            tags:
              - Todo
            requestModels:
              "application/json": TodoRequest
          method: post
          path: todos
          authorizer: RS256Auth
          cors: true
          reqValidatorName: onlyBody
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}          

  # TODO: Configure this function             
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          documentation:
            summary: "Update todo"
            description: "Update a todo item"
            tags:
              - UpdateTodo
            requestModels:
              "application/json": UpdateTodoRequest
          method: post
          path: todos/{todoId}
          authorizer: RS256Auth
          cors: true
          reqValidatorName: onlyBody           
    iamRoleStatementsInherit: true               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}          

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: RS256Auth
          cors: true 
    iamRoleStatementsInherit: true           
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}           

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: RS256Auth
          cors: true 
    iamRoleStatementsInherit: true 
    
  Thumbnail:           
    handler: src/lambda/s3/thumbnail.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatementsInherit: true            
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}  
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TODO_TABLE}    
           

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    # TodosDynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: todoId
    #         AttributeType: S
    #       - AttributeName: userId
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: todoId
    #         KeyType: HASH
    #     GlobalSecondaryIndexes:
    #       - IndexName: ${self:provider.environment.USERID_INDEX}
    #         KeySchema:
    #         - AttributeName: userId
    #           KeyType: HASH
    #         - AttributeName: todoId
    #           KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.TODOS_TABLE}
    
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S            
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH            
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    # AttachmentsDynamoDBTable:
    #   Type: "AWS::DynamoDB::Table"
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: todoId
    #         AttributeType: S
    #       - AttributeName: timestamp
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: todoId
    #         KeyType: HASH
    #       - AttributeName: timestamp
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.ATTACHMENTS_TABLE}

    AttachmentsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.USERS_TODO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_ID_INDEX}
            KeySchema:
            - AttributeName: todoId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        
    onlyBody:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false      

    # AttachmentsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000

    S3BucketTodos:
      Type: AWS::S3::Bucket 
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}   
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: 
                !Ref attachUrlTopic                                     
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Id: MyPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
    #     Bucket: !Ref AttachmentsBucket

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref S3BucketTodos 

    S3BucketThumbnail:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
    ThumbnailPermissionS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref  ThumbnailLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}

    ThumbnailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetResizePhotosBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: 'arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*'
        Bucket: !Ref S3BucketThumbnail         
        
    attachUrlTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Attach URL topic'
        TopicName: ${self:custom.topicName}

    attachUrlTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn:
        - attachUrlTopic      
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AllowServerlessFrameworkEnterpriseToPublish
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'sns:Publish'
              Resource:
                Ref: attachUrlTopic               
        Topics:
          - !Ref attachUrlTopic  
                    